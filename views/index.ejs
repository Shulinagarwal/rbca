<%- include('./layouts/header') %>

<h1 class="title">Role-Based Access Control with Express.js</h1>

<section class="tutorial-summary">
  <p>
    Dive into implementing a robust **Role-Based Access Control (RBAC)** system using Express.js. 
    This guide walks through creating roles like admin, moderator, and client, managing session persistence, 
    and ensuring secure authentication and authorization flows.
  </p>
</section>

<div class="tutorial-content">
  <h2>Features Covered</h2>
  <ul>
    <li><strong>Express.js:</strong> Core web framework for backend functionality.</li>
    <li><strong>EJS Templating:</strong> Dynamic rendering of server-side views.</li>
    <li><strong>Styling:</strong> Custom CSS for unique designs or frameworks like Bootstrap, TailwindCSS.</li>
    <li><strong>Passport.js:</strong> Secure local authentication (email/password).</li>
    <li><strong>User Roles:</strong> Support for admin, moderator, and client roles.</li>
    <li><strong>Authorization:</strong> Role-based route protection.</li>
    <li><strong>Mongoose:</strong> ORM integration for MongoDB.</li>
    <li><strong>Sessions:</strong> Persistent login using Express sessions and Mongo Store.</li>
    <li><strong>Redirection:</strong> Redirect users to the intended page post-login.</li>
    <li><strong>Validation:</strong> Server-side input validation to prevent invalid data.</li>
    <li><strong>Flash Messages:</strong> Provide user feedback for actions like login/logout.</li>
    <li><strong>Error Handling:</strong> Gracefully handle HTTP errors like 404 or 500.</li>
    <li><em>Additional Features:</em> Insights into bonus tips and techniques!</li>
  </ul>
</div>

<section class="extra-section">
  <h2>Why Learn RBAC?</h2>
  <p>
    RBAC is a cornerstone of modern web applications, offering precise control over user access.
    Mastering these concepts ensures your applications are secure, scalable, and user-friendly.
  </p>
</section>

<%- include('./layouts/footer') %>
